/*
 * simpleMSP_old.c
 *
 *  Created on: 2016年12月7日
 *      Author: NathanKun
 */

/*
 * simpleMSP.c
 *
 *  Created on: 6 dec. 2016
 *      Author: Junyang HE
 */
#include <MSP430.h>
#include <stdint.h>
#include <stdarg.h>
//#include "simpleMSP.h"

const uint8_t port1Pins[] = { P10, P11, P12, P13, P14, P15, P16, P17 };
const uint8_t port2Pins[] = { P20, P21, P22, P23, P24, P25, P26, P27 };

bool isPort1Pin(const uint8_t pin) {
	// in c 0 is false, any not 0 is true, so if(isPort1Pin) works
	if (pin >= P10 && pin <= P17)
		return true;
	return false;
}

bool isPort2Pin(const uint8_t pin) {
	if (pin >= P20 && pin <= P27)
		return true;
	return false;
}

uint16_t pinToBit(const uint8_t pin) {
	uint16_t bit = 0;
	switch (pin) {
	case P10:
	case P20:
		bit = BIT0;
		break;
	case P11:
	case P21:
		bit = BIT1;
		break;
	case P12:
	case P22:
		bit = BIT2;
		break;
	case P13:
	case P23:
		bit = BIT3;
		break;
	case P14:
	case P24:
		bit = BIT4;
		break;
	case P15:
	case P25:
		bit = BIT5;
		break;
	case P16:
	case P26:
		bit = BIT6;
		break;
	case P17:
	case P27:
		bit = BIT7;
		break;
	}
	return bit;
}

void directionPin(const uint8_t pin, const uint8_t direction) {
	switch (pin) {
	case P10:
		if (direction == OUTPUT)
			P1DIR |= BIT0;
		else if (direction == INPUT)
			P1DIR &= ~BIT0;
		break;
	case P11:
		if (direction == OUTPUT)
			P1DIR |= BIT1;
		else if (direction == INPUT)
			P1DIR &= ~BIT1;
		break;
	case P12:
		if (direction == OUTPUT)
			P1DIR |= BIT2;
		else if (direction == INPUT)
			P1DIR &= ~BIT2;
		break;
	case P13:
		if (direction == OUTPUT)
			P1DIR |= BIT3;
		else if (direction == INPUT)
			P1DIR &= ~BIT3;
		break;
	case P14:
		if (direction == OUTPUT)
			P1DIR |= BIT4;
		else if (direction == INPUT)
			P1DIR &= ~BIT4;
		break;
	case P15:
		if (direction == OUTPUT)
			P1DIR |= BIT5;
		else if (direction == INPUT)
			P1DIR &= ~BIT5;
		break;
	case P16:
		if (direction == OUTPUT)
			P1DIR |= BIT6;
		else if (direction == INPUT)
			P1DIR &= ~BIT6;
		break;
	case P17:
		if (direction == OUTPUT)
			P1DIR |= BIT7;
		else if (direction == INPUT)
			P1DIR &= ~BIT7;
		break;

	case P20:
		if (direction == OUTPUT)
			P2DIR |= BIT0;
		else if (direction == INPUT)
			P2DIR &= ~BIT0;
		break;
	case P21:
		if (direction == OUTPUT)
			P2DIR |= BIT1;
		else if (direction == INPUT)
			P2DIR &= ~BIT1;
		break;
	case P22:
		if (direction == OUTPUT)
			P2DIR |= BIT2;
		else if (direction == INPUT)
			P2DIR &= ~BIT2;
		break;
	case P23:
		if (direction == OUTPUT)
			P2DIR |= BIT3;
		else if (direction == INPUT)
			P2DIR &= ~BIT3;
		break;
	case P24:
		if (direction == OUTPUT)
			P2DIR |= BIT4;
		else if (direction == INPUT)
			P2DIR &= ~BIT4;
		break;
	case P25:
		if (direction == OUTPUT)
			P2DIR |= BIT5;
		else if (direction == INPUT)
			P2DIR &= ~BIT5;
		break;
	case P26:
		if (direction == OUTPUT)
			P2DIR |= BIT6;
		else if (direction == INPUT)
			P2DIR &= ~BIT6;
		break;
	case P27:
		if (direction == OUTPUT)
			P2DIR |= BIT7;
		else if (direction == INPUT)
			P2DIR &= ~BIT7;
		break;

	default:
		break;
	}
}

void digitalWrite(const uint8_t pin, const uint8_t value) {
	switch (pin) {
	case P10:
		if (value == HIGH)
			P1OUT |= BIT0;
		else if (value == LOW)
			P1OUT &= ~BIT0;
		break;
	case P11:
		if (value == HIGH)
			P1OUT |= BIT1;
		else if (value == LOW)
			P1OUT &= ~BIT1;
		break;
	case P12:
		if (value == HIGH)
			P1OUT |= BIT2;
		else if (value == LOW)
			P1OUT &= ~BIT2;
		break;
	case P13:
		if (value == HIGH)
			P1OUT |= BIT3;
		else if (value == LOW)
			P1OUT &= ~BIT3;
		break;
	case P14:
		if (value == HIGH)
			P1OUT |= BIT4;
		else if (value == LOW)
			P1OUT &= ~BIT4;
		break;
	case P15:
		if (value == HIGH)
			P1OUT |= BIT5;
		else if (value == LOW)
			P1OUT &= ~BIT5;
		break;
	case P16:
		if (value == HIGH)
			P1OUT |= BIT6;
		else if (value == LOW)
			P1OUT &= ~BIT6;
		break;
	case P17:
		if (value == HIGH)
			P1OUT |= BIT7;
		else if (value == LOW)
			P1OUT &= ~BIT7;
		break;

	case P20:
		if (value == HIGH)
			P2OUT |= BIT0;
		else if (value == LOW)
			P2OUT &= ~BIT0;
		break;
	case P21:
		if (value == HIGH)
			P2OUT |= BIT1;
		else if (value == LOW)
			P2OUT &= ~BIT1;
		break;
	case P22:
		if (value == HIGH)
			P2OUT |= BIT2;
		else if (value == LOW)
			P2OUT &= ~BIT2;
		break;
	case P23:
		if (value == HIGH)
			P2OUT |= BIT3;
		else if (value == LOW)
			P2OUT &= ~BIT3;
		break;
	case P24:
		if (value == HIGH)
			P2OUT |= BIT4;
		else if (value == LOW)
			P2OUT &= ~BIT4;
		break;
	case P25:
		if (value == HIGH)
			P2OUT |= BIT5;
		else if (value == LOW)
			P2OUT &= ~BIT5;
		break;
	case P26:
		if (value == HIGH)
			P2OUT |= BIT6;
		else if (value == LOW)
			P2OUT &= ~BIT6;
		break;
	case P27:
		if (value == HIGH)
			P2OUT |= BIT7;
		else if (value == LOW)
			P2OUT &= ~BIT7;
		break;

	default:
		break;
	}
}

int digitalRead(const uint8_t pin) {
	switch (pin) {
	case P10:
		if ((P1IN & BIT0) == BIT0)
			return HIGH;
		else
			return LOW;
	case P11:
		if ((P1IN & BIT1) == BIT1)
			return HIGH;
		else
			return LOW;
	case P12:
		if ((P1IN & BIT2) == BIT2)
			return HIGH;
		else
			return LOW;
	case P13:
		if ((P1IN & BIT3) == BIT3)
			return HIGH;
		else
			return LOW;
	case P14:
		if ((P1IN & BIT4) == BIT4)
			return HIGH;
		else
			return LOW;
	case P15:
		if ((P1IN & BIT5) == BIT5)
			return HIGH;
		else
			return LOW;
	case P16:
		if ((P1IN & BIT6) == BIT6)
			return HIGH;
		else
			return LOW;
	case P17:
		if ((P1IN & BIT7) == BIT7)
			return HIGH;
		else
			return LOW;

	case P20:
		if ((P2IN & BIT0) == BIT0)
			return HIGH;
		else
			return LOW;
	case P21:
		if ((P2IN & BIT1) == BIT1)
			return HIGH;
		else
			return LOW;
	case P22:
		if ((P2IN & BIT2) == BIT2)
			return HIGH;
		else
			return LOW;
	case P23:
		if ((P2IN & BIT3) == BIT3)
			return HIGH;
		else
			return LOW;
	case P24:
		if ((P2IN & BIT4) == BIT4)
			return HIGH;
		else
			return LOW;
	case P25:
		if ((P2IN & BIT5) == BIT5)
			return HIGH;
		else
			return LOW;
	case P26:
		if ((P2IN & BIT6) == BIT6)
			return HIGH;
		else
			return LOW;
	case P27:
		if ((P2IN & BIT7) == BIT7)
			return HIGH;
		else
			return LOW;

	default:
		break;
	}

	return LOW;
}

void selectPin(const uint8_t pin, const uint8_t mode) {
	switch (pin) {
	case P10:
		switch (mode) {
		case 0:
			P1SEL &= ~BIT0;
			P1SEL2 &= ~BIT0;
			break;
		case 1:
			P1SEL |= BIT0;
			P1SEL2 &= ~BIT0;
			break;
		case 2:
			P1SEL &= ~BIT0;
			P1SEL2 |= BIT0;
			break;
		case 3:
			P1SEL |= BIT0;
			P1SEL2 |= BIT0;
			break;
		}
		break;
	case P11:
		switch (mode) {
		case 0:
			P1SEL &= ~BIT1;
			P1SEL2 &= ~BIT1;
			break;
		case 1:
			P1SEL |= BIT1;
			P1SEL2 &= ~BIT1;
			break;
		case 2:
			P1SEL &= ~BIT1;
			P1SEL2 |= BIT1;
			break;
		case 3:
			P1SEL |= BIT1;
			P1SEL2 |= BIT1;
			break;
		}
		break;
	case P12:
		switch (mode) {
		case 0:
			P1SEL &= ~BIT2;
			P1SEL2 &= ~BIT2;
			break;
		case 1:
			P1SEL |= BIT2;
			P1SEL2 &= ~BIT2;
			break;
		case 2:
			P1SEL &= ~BIT2;
			P1SEL2 |= BIT2;
			break;
		case 3:
			P1SEL |= BIT2;
			P1SEL2 |= BIT2;
			break;
		}
		break;
	case P13:
		switch (mode) {
		case 0:
			P1SEL &= ~BIT3;
			P1SEL2 &= ~BIT3;
			break;
		case 1:
			P1SEL |= BIT3;
			P1SEL2 &= ~BIT3;
			break;
		case 2:
			P1SEL &= ~BIT3;
			P1SEL2 |= BIT3;
			break;
		case 3:
			P1SEL |= BIT3;
			P1SEL2 |= BIT3;
			break;
		}
		break;
	case P14:
		switch (mode) {
		case 0:
			P1SEL &= ~BIT4;
			P1SEL2 &= ~BIT4;
			break;
		case 1:
			P1SEL |= BIT4;
			P1SEL2 &= ~BIT4;
			break;
		case 2:
			P1SEL &= ~BIT4;
			P1SEL2 |= BIT4;
			break;
		case 3:
			P1SEL |= BIT4;
			P1SEL2 |= BIT4;
			break;
		}
		break;
	case P15:
		switch (mode) {
		case 0:
			P1SEL &= ~BIT5;
			P1SEL2 &= ~BIT5;
			break;
		case 1:
			P1SEL |= BIT5;
			P1SEL2 &= ~BIT5;
			break;
		case 2:
			P1SEL &= ~BIT5;
			P1SEL2 |= BIT5;
			break;
		case 3:
			P1SEL |= BIT5;
			P1SEL2 |= BIT5;
			break;
		}
		break;
	case P16:
		switch (mode) {
		case 0:
			P1SEL &= ~BIT6;
			P1SEL2 &= ~BIT6;
			break;
		case 1:
			P1SEL |= BIT6;
			P1SEL2 &= ~BIT6;
			break;
		case 2:
			P1SEL &= ~BIT6;
			P1SEL2 |= BIT6;
			break;
		case 3:
			P1SEL |= BIT6;
			P1SEL2 |= BIT6;
			break;
		}
		break;
	case P17:
		switch (mode) {
		case 0:
			P1SEL &= ~BIT7;
			P1SEL2 &= ~BIT7;
			break;
		case 1:
			P1SEL |= BIT7;
			P1SEL2 &= ~BIT7;
			break;
		case 2:
			P1SEL &= ~BIT7;
			P1SEL2 |= BIT7;
			break;
		case 3:
			P1SEL |= BIT7;
			P1SEL2 |= BIT7;
			break;
		}
		break;

	case P20:
		switch (mode) {
		case 0:
			P2SEL &= ~BIT0;
			P2SEL2 &= ~BIT0;
			break;
		case 1:
			P2SEL |= BIT0;
			P2SEL2 &= ~BIT0;
			break;
		case 2:
			P2SEL &= ~BIT0;
			P2SEL2 |= BIT0;
			break;
		case 3:
			P2SEL |= BIT0;
			P2SEL2 |= BIT0;
			break;
		}
		break;
	case P21:
		switch (mode) {
		case 0:
			P2SEL &= ~BIT1;
			P2SEL2 &= ~BIT1;
			break;
		case 1:
			P2SEL |= BIT1;
			P2SEL2 &= ~BIT1;
			break;
		case 2:
			P2SEL &= ~BIT1;
			P2SEL2 |= BIT1;
			break;
		case 3:
			P2SEL |= BIT1;
			P2SEL2 |= BIT1;
			break;
		}
		break;
	case P22:
		switch (mode) {
		case 0:
			P2SEL &= ~BIT2;
			P2SEL2 &= ~BIT2;
			break;
		case 1:
			P2SEL |= BIT2;
			P2SEL2 &= ~BIT2;
			break;
		case 2:
			P2SEL &= ~BIT2;
			P2SEL2 |= BIT2;
			break;
		case 3:
			P2SEL |= BIT2;
			P2SEL2 |= BIT2;
			break;
		}
		break;
	case P23:
		switch (mode) {
		case 0:
			P2SEL &= ~BIT3;
			P2SEL2 &= ~BIT3;
			break;
		case 1:
			P2SEL |= BIT3;
			P2SEL2 &= ~BIT3;
			break;
		case 2:
			P2SEL &= ~BIT3;
			P2SEL2 |= BIT3;
			break;
		case 3:
			P2SEL |= BIT3;
			P2SEL2 |= BIT3;
			break;
		}
		break;
	case P24:
		switch (mode) {
		case 0:
			P2SEL &= ~BIT4;
			P2SEL2 &= ~BIT4;
			break;
		case 1:
			P2SEL |= BIT4;
			P2SEL2 &= ~BIT4;
			break;
		case 2:
			P2SEL &= ~BIT4;
			P2SEL2 |= BIT4;
			break;
		case 3:
			P2SEL |= BIT4;
			P2SEL2 |= BIT4;
			break;
		}
		break;
	case P25:
		switch (mode) {
		case 0:
			P2SEL &= ~BIT5;
			P2SEL2 &= ~BIT5;
			break;
		case 1:
			P2SEL |= BIT5;
			P2SEL2 &= ~BIT5;
			break;
		case 2:
			P2SEL &= ~BIT5;
			P2SEL2 |= BIT5;
			break;
		case 3:
			P2SEL |= BIT5;
			P2SEL2 |= BIT5;
			break;
		}
		break;
	case P26:
		switch (mode) {
		case 0:
			P2SEL &= ~BIT6;
			P2SEL2 &= ~BIT6;
			break;
		case 1:
			P2SEL |= BIT6;
			P2SEL2 &= ~BIT6;
			break;
		case 2:
			P2SEL &= ~BIT6;
			P2SEL2 |= BIT6;
			break;
		case 3:
			P2SEL |= BIT6;
			P2SEL2 |= BIT6;
			break;
		}
		break;
	case P27:
		switch (mode) {
		case 0:
			P2SEL &= ~BIT7;
			P2SEL2 &= ~BIT7;
			break;
		case 1:
			P2SEL |= BIT7;
			P2SEL2 &= ~BIT7;
			break;
		case 2:
			P2SEL &= ~BIT7;
			P2SEL2 |= BIT7;
			break;
		case 3:
			P2SEL |= BIT7;
			P2SEL2 |= BIT7;
			break;
		}
		break;
	}
}

void pullupPin(const uint8_t pin, const uint8_t enable) {
	switch (pin) {
	case P10:
		if (enable == ENABLE)
			P1REN |= BIT0;
		else if (enable == DISABLE)
			P1REN &= ~BIT0;
		break;
	case P11:
		if (enable == ENABLE)
			P1REN |= BIT1;
		else if (enable == DISABLE)
			P1REN &= ~BIT1;
		break;
	case P12:
		if (enable == ENABLE)
			P1REN |= BIT2;
		else if (enable == DISABLE)
			P1REN &= ~BIT2;
		break;
	case P13:
		if (enable == ENABLE)
			P1REN |= BIT3;
		else if (enable == DISABLE)
			P1REN &= ~BIT3;
		break;
	case P14:
		if (enable == ENABLE)
			P1REN |= BIT4;
		else if (enable == DISABLE)
			P1REN &= ~BIT4;
		break;
	case P15:
		if (enable == ENABLE)
			P1REN |= BIT5;
		else if (enable == DISABLE)
			P1REN &= ~BIT5;
		break;
	case P16:
		if (enable == ENABLE)
			P1REN |= BIT6;
		else if (enable == DISABLE)
			P1REN &= ~BIT6;
		break;
	case P17:
		if (enable == ENABLE)
			P1REN |= BIT7;
		else if (enable == DISABLE)
			P1REN &= ~BIT7;
		break;

	}
}

void interruptPin(const uint8_t pin, const uint8_t enable, ...) {
	va_list valist;

	// initialize valist for num number of arguments
	va_start(valist, enable);

	uint8_t is_enable = FALSE;
	uint8_t edge = FALLING_EDGE;
	if (va_arg(valist, uint8_t) == ENABLE) {
		edge = va_arg(valist, uint8_t);
		is_enable = TRUE;
	}

	va_end(valist);

	switch (pin) {
	case P10:
		if (is_enable == TRUE) {
			P1IE |= BIT0;
			if (edge == RISING_EDGE)
				P1IES |= BIT0;
			else if (edge == FALLING_EDGE)
				P1IES &= ~BIT0;
		} else
			P1IE &= ~BIT0;
		break;
	case P11:
		if (is_enable == TRUE) {
			P1IE |= BIT1;
			if (edge == RISING_EDGE)
				P1IES |= BIT1;
			else if (edge == FALLING_EDGE)
				P1IES &= ~BIT1;
		} else
			P1IE &= ~BIT1;
		break;
	case P12:
		if (is_enable == TRUE) {
			P1IE |= BIT2;
			if (edge == RISING_EDGE)
				P1IES |= BIT2;
			else if (edge == FALLING_EDGE)
				P1IES &= ~BIT2;
		} else
			P1IE &= ~BIT2;
		break;
	case P13:
		if (is_enable == TRUE) {
			P1IE |= BIT3;
			if (edge == RISING_EDGE)
				P1IES |= BIT3;
			else if (edge == FALLING_EDGE)
				P1IES &= ~BIT3;
		} else
			P1IE &= ~BIT3;
		break;
	case P14:
		if (is_enable == TRUE) {
			P1IE |= BIT4;
			if (edge == RISING_EDGE)
				P1IES |= BIT4;
			else if (edge == FALLING_EDGE)
				P1IES &= ~BIT4;
		} else
			P1IE &= ~BIT4;
		break;
	case P15:
		if (is_enable == TRUE) {
			P1IE |= BIT5;
			if (edge == RISING_EDGE)
				P1IES |= BIT5;
			else if (edge == FALLING_EDGE)
				P1IES &= ~BIT5;
		} else
			P1IE &= ~BIT5;
		break;
	case P16:
		if (is_enable == TRUE) {
			P1IE |= BIT6;
			if (edge == RISING_EDGE)
				P1IES |= BIT6;
			else if (edge == FALLING_EDGE)
				P1IES &= ~BIT6;
		} else
			P1IE &= ~BIT6;
		break;
	case P17:
		if (is_enable == TRUE) {
			P1IE |= BIT7;
			if (edge == RISING_EDGE)
				P1IES |= BIT7;
			else if (edge == FALLING_EDGE)
				P1IES &= ~BIT7;
		} else
			P1IE &= ~BIT7;
		break;

	case P20:
		if (is_enable == TRUE) {
			P2IE |= BIT0;
			if (edge == RISING_EDGE)
				P2IES |= BIT0;
			else if (edge == FALLING_EDGE)
				P2IES &= ~BIT0;
		} else
			P2IE &= ~BIT0;
		break;
	case P21:
		if (is_enable == TRUE) {
			P2IE |= BIT1;
			if (edge == RISING_EDGE)
				P2IES |= BIT1;
			else if (edge == FALLING_EDGE)
				P2IES &= ~BIT1;
		} else
			P2IE &= ~BIT1;
		break;
	case P22:
		if (is_enable == TRUE) {
			P2IE |= BIT2;
			if (edge == RISING_EDGE)
				P2IES |= BIT2;
			else if (edge == FALLING_EDGE)
				P2IES &= ~BIT2;
		} else
			P2IE &= ~BIT2;
		break;
	case P23:
		if (is_enable == TRUE) {
			P2IE |= BIT3;
			if (edge == RISING_EDGE)
				P2IES |= BIT3;
			else if (edge == FALLING_EDGE)
				P2IES &= ~BIT3;
		} else
			P2IE &= ~BIT3;
		break;
	case P24:
		if (is_enable == TRUE) {
			P2IE |= BIT4;
			if (edge == RISING_EDGE)
				P2IES |= BIT4;
			else if (edge == FALLING_EDGE)
				P2IES &= ~BIT4;
		} else
			P2IE &= ~BIT4;
		break;
	case P25:
		if (is_enable == TRUE) {
			P2IE |= BIT5;
			if (edge == RISING_EDGE)
				P2IES |= BIT5;
			else if (edge == FALLING_EDGE)
				P2IES &= ~BIT5;
		} else
			P2IE &= ~BIT5;
		break;
	case P26:
		if (is_enable == TRUE) {
			P2IE |= BIT6;
			if (edge == RISING_EDGE)
				P2IES |= BIT6;
			else if (edge == FALLING_EDGE)
				P2IES &= ~BIT6;
		} else
			P2IE &= ~BIT6;
		break;
	case P27:
		if (is_enable == TRUE) {
			P2IE |= BIT7;
			if (edge == RISING_EDGE)
				P2IES |= BIT7;
			else if (edge == FALLING_EDGE)
				P2IES &= ~BIT7;
		} else
			P2IE &= ~BIT7;
		break;

	}
}

void enableS2() {
	selectPin(P13, 0);
	directionPin(P13, INPUT);
	pullupPin(P13, ENABLE);
	digitalWrite(P13, HIGH);
}

void initPorts() {
	P1DIR = 0xFF;
	P1OUT = 0x00;
	P2DIR = 0xFF;
	P2OUT = 0x00;
	P3DIR = 0xFF;
	P3OUT = 0x00;
}

